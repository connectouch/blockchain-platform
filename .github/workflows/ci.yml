name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Lint and Test Jobs
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        workspace: [backend, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Lint ${{ matrix.workspace }}
      run: npm run lint --workspace=apps/${{ matrix.workspace }}

    - name: Test ${{ matrix.workspace }}
      run: npm run test --workspace=apps/${{ matrix.workspace }}
      env:
        NODE_ENV: test

    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./apps/${{ matrix.workspace }}/coverage/lcov.info
        flags: ${{ matrix.workspace }}

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: npm audit --audit-level=moderate

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium

    - name: Upload Snyk results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: snyk.sarif

  # Build Docker Images
  build-images:
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./infrastructure/docker/Dockerfile.${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to EKS
      run: |
        aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name connectouch-staging
        kubectl apply -f infrastructure/kubernetes/staging/
        kubectl rollout status deployment/backend-deployment -n connectouch-staging
        kubectl rollout status deployment/frontend-deployment -n connectouch-staging

    - name: Run health checks
      run: |
        kubectl wait --for=condition=ready pod -l app=backend -n connectouch-staging --timeout=300s
        kubectl wait --for=condition=ready pod -l app=frontend -n connectouch-staging --timeout=300s

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to EKS
      run: |
        aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name connectouch-production
        kubectl apply -f infrastructure/kubernetes/production/
        kubectl rollout status deployment/backend-deployment -n connectouch-production
        kubectl rollout status deployment/frontend-deployment -n connectouch-production

    - name: Run health checks
      run: |
        kubectl wait --for=condition=ready pod -l app=backend -n connectouch-production --timeout=300s
        kubectl wait --for=condition=ready pod -l app=frontend -n connectouch-production --timeout=300s

    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: 'Production deployment successful! ðŸš€'
