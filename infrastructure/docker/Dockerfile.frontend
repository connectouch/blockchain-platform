# Multi-stage build for React frontend
FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies based on the preferred package manager
COPY apps/frontend/package*.json ./
RUN npm ci

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY apps/frontend/package*.json ./
RUN npm ci

COPY apps/frontend/ .
COPY packages/shared/ ../packages/shared/
COPY packages/ui/ ../packages/ui/

# Build the application
ENV NODE_ENV=production
ENV GENERATE_SOURCEMAP=false
ENV REACT_APP_API_URL=http://localhost:3001
ENV REACT_APP_WS_URL=ws://localhost:3001

RUN npm run build

# Production image, copy all the files and run nginx
FROM nginx:alpine AS runner
WORKDIR /usr/share/nginx/html

# Remove default nginx static assets
RUN rm -rf ./*

# Copy static assets from builder stage
COPY --from=builder /app/dist .
COPY infrastructure/docker/nginx/nginx.conf /etc/nginx/nginx.conf

# Add bash for health checks
RUN apk add --no-cache bash curl

# Create nginx user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nginx -u 1001

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000 || exit 1

CMD ["nginx", "-g", "daemon off;"]
